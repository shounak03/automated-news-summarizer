

import { useEffect, useState } from 'react'
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Card } from "@/components/ui/card"
import { Link, useLocation } from 'react-router-dom'


export default function Summary(){

    const location = useLocation();
    const { url } = location.state || {};

    const [summary, setSummary] = useState([])
    const [data, setData] = useState([])
    
    const summarize = async () => {
        const res = await fetch(`http://127.0.0.1:8000/api/summarize`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({
                url: url
            })
        })
        const summ = await res.json()
        setSummary(summ)
        setShowSummary(true)
        console.log(summary)
    }
   const getContent = async () => {
        const res = await fetch(`http://127.0.0.1:8000/api/urlScrapper`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*',
            },
            body: JSON.stringify({
                url: url
            })
        })
        const content = await res.json()
        setData(content)
        console.log(content)
    }

  const [showSummary, setShowSummary] = useState(false)
  
useEffect(() => {
    getContent();

},[getContent] )
  
// const generateSummary = () => {
//     // This is a placeholder function. In a real application, you would call your summarization API here.
//     const placeholderSummary = "This is a placeholder summary of the article. In a real application, this would be generated by your summarization algorithm. ".repeat(10)
//     // setSummary(summary => ({ ...summary, response: placeholderSummary }))
   
//   }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <header className="bg-primary text-primary-foreground p-4 shadow-md">
        <h1 className="text-2xl font-bold text-center">{data?.title}</h1>
      </header>

      <main className="flex-grow p-4 flex flex-col">
        <div className="mb-4 flex justify-end">
          <Button onClick={summarize} className="bg-secondary text-secondary-foreground hover:bg-secondary/90">
            Generate Summary
          </Button>
        </div>

        <div className={`flex-grow flex ${showSummary ? 'space-x-4' : ''}`}>
          <Card className={`bg-white p-4 ${showSummary ? 'w-1/2' : 'w-full'}`}>
            <ScrollArea className="h-[calc(100vh-16rem)]">
              <div className="pr-4">
                <p className="text-gray-800">{data?.content}</p>
              </div>
            </ScrollArea>
          </Card>

          {showSummary && (
            <Card className="w-1/2 bg-white p-4">
              <ScrollArea className="h-[calc(100vh-16rem)]">
                <h2 className="text-xl font-semibold mb-2 text-primary">Summary</h2>
                <p className="text-gray-800">{summary.response}</p>
              </ScrollArea>
            </Card>
          )}
        </div>
      </main>

      <footer className="bg-gray-200 p-4 text-center">
        <Link
          to={url} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-blue-600 hover:underline"
        >
          Read full article
        </Link>
      </footer>
    </div>
  )
}